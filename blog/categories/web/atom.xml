<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web | Jun Lee's Blog]]></title>
  <link href="http://apollojoke.github.io/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://apollojoke.github.io/"/>
  <updated>2014-11-14T16:38:44+08:00</updated>
  <id>http://apollojoke.github.io/</id>
  <author>
    <name><![CDATA[Jun Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WEB开发宏观理解]]></title>
    <link href="http://apollojoke.github.io/blog/2014/10/24/webkai-fa-hong-guan-li-jie/"/>
    <updated>2014-10-24T11:56:14+08:00</updated>
    <id>http://apollojoke.github.io/blog/2014/10/24/webkai-fa-hong-guan-li-jie</id>
    <content type="html"><![CDATA[<p>和大胖聊了很长时间web的发展历史，并且从宏观上总结一些web开发中的各种技术。我觉得我很需要这方面的总结，当我在遇到一些新的名词，一个新的技术的时候，我可以从宏观上把握这个技术属于那一块，这不仅便于学习理解，跟有利于横向的与同类技术比较。所以本文非常大概的梳理web的发展，主要目的就是自己理一理web开发相关的大块技术，给出一些Key Words，方便学习。</p>

<p>起初，在静态页面的年代，访问到的网页都是静态HTML页面，一个URL对应的静态HTML页面也就是一个静态资源，所以这也很好的解释了，为什么访问一个页面的地址叫做URL，一个地址对应的就是一个资源，所以叫统一资源定位。</p>

<p>随着时代的进步，互联网的普及， 信息量也越来越大，不可能无限制的堆积静态页面，所以动态页面技术应运而生，cgi(动态网管接口)就是典型的代表。</p>

<p>而随着页面（信息量）越来越多，如何有效的管理这些页面（也就是如何让人们请求到相应的页面）成为一个很深刻的问题，MVC在此刻出现，直到现在，MVC架构依然是霸主地位。</p>

<p>围绕着MVC，人们做了很多文章。其中主要集中在M和V上，C中也有。大概总结如下：</p>

<p>M ：</p>

<p>以前的web框架中有个数据持久化层，现在随着OOP的发展，数据持久化的功能都放在model里完成了，ORM技术就是数据持久化技术，并且在此与数据库打交道。</p>

<p>提到DB，这是非常大的一块，我在学习理解中，将其分为两类：</p>

<ol>
<li><p>关系型数据库</p>

<p>以MYSQL, SQLServer, Oracle为代表。</p></li>
<li><p>非关系型数据库</p>

<p>以MongoDB, Redis为代表。</p></li>
</ol>


<p>数据库性能优化，虽然这是DBA的工作，但是也是很有意思的领域，DEV也需要了解最好能掌握，此外，大胖给出一些关键词：map-reduce 等等。</p>

<p>V：</p>

<p>基本在每一个框架中都会有模板引擎，java的jsp, rails的erb，nodeJS的jade等，其实模板引擎并不神秘，就是HTML的语法糖，帮助你多快好省的写出大片的html代码。</p>

<p>在View这一块，不得不说的是，现在的web开发趋势是 富客户端应用，顾名思义，前端的东西越来越多了，</p>

<p>Flash &mdash;&mdash;->  JS  &mdash;&mdash;-> HTML5</p>

<p>在这个发展过程中也有很多很多让人眼花缭乱的东西，
例如，JS向外延伸，有很多js的类库，例如JQuery,帮你实现了很多JS的功能，是你使用起来更方便；同时也有很多JS的语法糖，例如CoffeeJS，对于JS，取其精华去其糟粕。</p>

<p>此外，前端JS框架也如火如荼，例如AngularJS，一个前端的MVC框架。</p>

<p>C：</p>

<p>Controller里的真正奥义可能我还没有接触到，大胖给我提了一下缓存技术，虽然在M和V中也有，但我把它写到C里，填补一下这里的空白。</p>

<p>以上是web开发，却也离不开部署和运维。</p>

<p>这里我知道的听到的都不多，只能列一些关键词：</p>

<p>Nginx反向代理， 分布式部署， 负载均衡等等。</p>

<p>最后还要再次感谢大胖的讲解。</p>
]]></content>
  </entry>
  
</feed>
