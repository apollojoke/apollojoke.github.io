<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jun Lee's Blog]]></title>
  <link href="http://apollojoke.github.io/atom.xml" rel="self"/>
  <link href="http://apollojoke.github.io/"/>
  <updated>2014-10-13T10:52:50+08:00</updated>
  <id>http://apollojoke.github.io/</id>
  <author>
    <name><![CDATA[Jun Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS学习笔记]]></title>
    <link href="http://apollojoke.github.io/blog/2014/10/10/angularjsxue-xi-bi-ji/"/>
    <updated>2014-10-10T16:49:10+08:00</updated>
    <id>http://apollojoke.github.io/blog/2014/10/10/angularjsxue-xi-bi-ji</id>
    <content type="html"><![CDATA[<p>这两天被项目上拉去填坑，得恶补下AngularJS，这段时间持续更新这篇学习心得。</p>

<p>我随便找了个网上的快速入门，简单翻了下，感觉可以看看入门。作为一个很火的前端框架，AngularJS远不止教程中提到的这些。  <a href="http://www.ituring.com.cn/minibook/303">链接</a></p>

<hr />

<h3>Hello World</h3>

<p>Hello World 例程：</p>

<pre><code>&lt;!doctype html&gt;
    &lt;html ng-app&gt;
    &lt;head&gt;
        &lt;script src="http://code.angularjs.org/angular-1.0.1.min.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        Your name: &lt;input type="text" ng-model="yourname" placeholder="World"&gt;
        &lt;hr&gt;
        Hello !
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>总结：</p>

<ol>
<li><p>标记<code>ng-app</code>告诉AngularJS处理整个HTML页并引导应用；</p>

<p> 在<code>&lt;html&gt;</code>中添加<code>ng-app</code>属性即说明整个<code>&lt;html&gt;</code>都是AngularJS脚本作用域。开发者也可以在局部使用ng-app指令，如<code>&lt;div ng-app&gt;</code>，则AngularJS脚本仅在该<code>&lt;div&gt;</code>中运行。</p></li>
<li><p>载入AngularJS脚本；</p>

<p> <code>&lt;script src="http://code.angularjs.org/angular-1.0.1.min.js"&gt;&lt;/script&gt;</code></p>

<p> 这行代码载入angular.js脚本，当浏览器将整个HTML页面载入完毕后将会执行该angular.js脚本，angular.js脚本运行后将会寻找含有ng-app指令的HTML标签，该标签即定义了AngularJS应用的作用域。</p></li>
<li><p>指令<code>&lt;input ng-model="yourname" /&gt;</code>绑定到一个叫yourname的模型变量；</p></li>
<li><p>AngularJS模板的核心功能——绑定。由双大括号&#8220;&#8220;和变量yourname组成；</p>

<p> AngularJS表达式仅在AngularJS的作用域中运行，而不是在整个DOM中运行。</p>

<p> 输入框的任何更改会立即反映到模型变量（一个方向），模型变量的任何更改都会立即反映到问候语文本中（另一方向），这就是AngularJS的双向绑定；</p></li>
</ol>


<hr />

<h3>MVC in AngularJS</h3>

<p>以下的例子，用AngularJS添加一些模型-视图-控制器。</p>

<p>视图（可以理解为显示的页面）：</p>

<pre><code>&lt;html lang="en" ng-app="phonecatApp"&gt;
&lt;head&gt;
    &lt;title&gt;Google Phone Gallery&lt;/title&gt;
    &lt;script src="lib/angular/angular.js"&gt;&lt;/script&gt;
    &lt;script src="js/controllers.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body ng-controller="PhoneListCtrl"&gt;
    &lt;ul&gt;
        &lt;li ng-repeat="phone in phones"&gt;
            &lt;p&gt;&lt;/p&gt;
            &lt;p&gt;&lt;/p&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>控制器和模型：</p>

<pre><code>var phonecatApp = angular.module('phonecatApp', []);
phonecatApp.controller('PhoneListCtrl', function($scope) {
    $scope.phones = [
        {'name': 'Nexus S', 'snippet': 'Fast just got faster with Nexus S.'},
        {'name': 'Motorola XOOM™ with Wi-Fi', 'snippet': 'The Next, Next Generation tablet.'},
        {'name': 'MOTOROLA XOOM™', 'snippet': 'The Next, Next Generation tablet.'}
    ];
});
</code></pre>

<p>总结：</p>

<p>视图里</p>

<ol>
<li><code>&lt;html lang="en" ng-app="phonecatApp"&gt;</code>定义AngularJS作用域；</li>
<li><code>&lt;script src="js/controllers.js"&gt;&lt;/script&gt;</code> 引入了包含controller的js文件；</li>
<li><code>&lt;body ng-controller="PhoneListCtrl"&gt;</code>指定对应的controller；</li>
<li><code>&lt;li&gt;</code>里使用AngularJS迭代器<code>ng-repeat="phone in phones"</code>；</li>
<li><code>和</code>是数据模型引用，在控制器里可以找到模型的定义；</li>
</ol>


<p>控制器里</p>

<ol>
<li>使用<code>angular.module()</code>绑定一个ng-app，在视图里声明，在这里绑定；</li>
<li>为app里注册一个controller，我想这与在视图中使用同名的ng-app，应该是有相同的作用域之类的关联；PhoneListCtrl为控制器的名字，使用时需要与视图中ngController指令值相匹配；</li>
<li><code>phonecatApp.controller('PhoneListCtrl', function($scope){}</code>里的<code>$scope</code>是控制器的作用域，这个例子里就是<code>&lt;body&gt;</code>标签，所以在<code>$scope</code>里初始化的<code>phones</code>,在<code>&lt;body&gt;</code>标签中可用。这里值得注意的是controller定义在里ng-app里面，controller里面定义的ng-model在controller外无法使用；</li>
</ol>


<hr />

<h3>迭代器过滤</h3>

<p>在上一个例子的视图代码中，迭代器部分修改为：</p>

<pre><code>&lt;html lang="en" ng-app="phonecatApp"&gt;
&lt;head&gt;
    &lt;title&gt;Google Phone Gallery&lt;/title&gt;
    &lt;script src="lib/angular/angular.js"&gt;&lt;/script&gt;
    &lt;script src="js/controllers.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body ng-controller="PhoneListCtrl"&gt;
    &lt;div class="span2"&gt;
      Search: &lt;input ng-model="query"&gt;
    &lt;/div&gt;
    &lt;ul&gt;
        &lt;li ng-repeat="phone in phones" | filter:query&gt;
            &lt;p&gt;&lt;/p&gt;
            &lt;p&gt;&lt;/p&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>总结：</p>

<ol>
<li>使用AngularJS的<code>$filter</code>函数来处理ngRepeat指令的输入。过滤出包含的内容，</li>
<li><code>ng-model="query"</code>只在controller的作用域，而不是ng-app的作用域，在title里就没法用query这个model</li>
</ol>


<hr />

<h3>双向绑定</h3>

<p>模板代码：</p>

<pre><code>Search: &lt;input ng-model="query"&gt;
Sort by:
&lt;select ng-model="orderProp"&gt;
    &lt;option value="name"&gt;Alphabetical&lt;/option&gt;
    &lt;option value="age"&gt;Newest&lt;/option&gt;
&lt;/select&gt;
&lt;ul class="phones"&gt;
    &lt;li ng-repeat="phone in phones | filter:query | orderBy:orderProp"&gt;

        &lt;p&gt;&lt;/p&gt;
    &lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>控制器代码：</p>

<pre><code>function PhoneListCtrl($scope) {
    $scope.phones = [
        {"name": "Nexus S", "snippet": "Fast just got faster with Nexus S.", "age": 0},
        {"name": "Motorola XOOM™ with Wi-Fi", "snippet": "The Next, Next Generation tablet.", "age": 1},
        {"name": "MOTOROLA XOOM™", "snippet": "The Next, Next Generation tablet.", "age": 2}
    ];
    $scope.orderProp = 'age';
}
</code></pre>

<p>总结：</p>

<ol>
<li>在模板中，添加了一个名为<code>orderProp</code>的<code>&lt;select&gt;</code>标签，并在迭代器中加入了<code>orderBy:orderProp</code>过滤器。AngularJS在<code>select</code>元素和<code>orderProp</code>模型之间创建了一个双向绑定。而后，<code>orderProp</code>会被用作<code>orderBy</code>过滤器的输入；</li>
<li>修改了<code>phones</code>模型，添加了<code>age</code>属性，排序用；</li>
<li>在congtroller的作用域中初始化了<code>orderProp</code>，使其值为age。因为<code>orderProp</code>的值是双向绑定的，所以应用在浏览器中加载时，<code>Newes</code>在下拉菜单中默认被选中。这是因为我们在控制器中把<code>orderProp</code>设置成了<code>age</code>。所以绑定在从我们模型到用户界面的方向上起作用——即<font color='red'>数据从模型到视图的绑定</font>。
现在当你在下拉菜单中选择<code>Alphabetically</code>，数据模型会被同时更新，并且页面会被重新排序。这个时候数据绑定从另一个方向产生了作用——即<font color='red'>数据从视图到模型的绑定</font>。</li>
</ol>


<hr />

<h3>XHR 和 依赖注入</h3>

<p>修改controller代码为：</p>

<pre><code>phonecatApp.controller('PhoneListCtrl', function($scope, $http) {
    $http.get('phones/phones.json').success(function(data) {
        $scope.phones = data;
    });

    $scope.orderProp = 'age';
});
//PhoneListCtrl.$inject = ['$scope', '$http'];
</code></pre>

<p>原来的<code>phones</code>数据hard code在代码中，现在用一个ajax请求取回数据。</p>

<p>所谓的依赖注入，我理解为，这段代码中依赖<code>$http</code>，最原始的做法是<code>var http = require(*/*/http.js)</code>然后再使用<code>http</code>变量，这相当于在自己的代码里new一个依赖的组件，现在依赖注入，就是直接将依赖传入到function中。（<code>$http</code>是AngularJS众多内建服务中之一）。</p>

<p>有一个文章,很好的解释了依赖注入。  <a href="http://angularjs.cn/A00z">链接</a></p>

<p><code>$</code>前缀命名习惯:</p>

<p>在AngularJS中你可以创建自己的服务。作为一个命名习惯，AngularJS内建服务，作用域方法，以及一些其他的AngularJS API都在名字前面使用一个‘$’前缀。不要使用‘$’前缀来命名你自己的服务和模型，否则可能会产生名字冲突。</p>

<p>关于JS压缩：</p>

<p>由于AngularJS是通过控制器构造函数的参数名字来推断依赖服务名称的。所以如果你要压缩<code>PhoneListCtrl</code>控制器的JS代码，它所有的参数也同时会被压缩，这时候依赖注入系统就不能正确的识别出服务了。</p>

<p>为了克服压缩引起的问题，只要在控制器函数里面给$inject属性赋值一个依赖服务标识符的数组，就像被注释掉那段最后一行那样</p>

<pre><code>PhoneListCtrl.$inject = ['$scope', '$http'];
</code></pre>

<p>另一种方法也可以用来指定依赖列表并且避免压缩问题——使用Javascript数组方式构造控制器：把要注入的服务放到一个字符串数组（代表依赖的名字）里，数组最后一个元素是控制器的方法函数：</p>

<pre><code>var PhoneListCtrl = ['$scope', '$http', function($scope, $http) { /* constructor body */ }];
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解REST]]></title>
    <link href="http://apollojoke.github.io/blog/2014/09/29/li-jie-rest/"/>
    <updated>2014-09-29T17:40:54+08:00</updated>
    <id>http://apollojoke.github.io/blog/2014/09/29/li-jie-rest</id>
    <content type="html"><![CDATA[<h4>REST的核心原则</h4>

<p>REST的核心原则是将你的API拆分为逻辑上的资源。这些资源通过http被操作（GET ,POST,PUT,DELETE）。</p>

<p>我觉得这句话就概括了REST。把API抽象为资源，利用起HTTP协议中被遗忘的操作，使用“动词 + URI”的形式调用API。</p>

<p>其中</p>

<p>动词 就是http操作，例如 get，post，delete, 此外 update和patch的区别也是个很有意思的东西，回头研究研究。</p>

<p>URI 就是抽象出来的资源的地址。</p>

<p>举个删除一个帖子的例子：</p>

<p>通常的做法是： 发送例如 &lsquo;<a href="http://localhost:3000/deletePost?postId=1">http://localhost:3000/deletePost?postId=1</a>&rsquo; 这样的一个GET请求，后台有个controller去处理。</p>

<p>符合REST风格的做法就是： 向&#8217;<a href="http://localhost:3000/posts/1">http://localhost:3000/posts/1</a>&#8216;发送一个delete请求，后台同样有个controller处理。</p>

<p>由此看出，一个RESTful的命名要使用名词，在URI中避免出现例如edit, update等动词。将原本用参数表达的信息放到URI中（例如postId=1, 变成了**/posts/1）。</p>

<p>此外，我将REST风格理解成为web service对外暴露API的风格，可以使调用更清晰更规范。简单的说就是写router的风格，当请求进来后就与REST无关了，该用MVC还继续用MVC。</p>

<hr />

<p>以下是在wikipedia上总结来的更书面一些的内容。仅供参考</p>

<h4>REST</h4>

<p>REST (Representational State Transfer)，含状态传输， 是一种软件架构风格。</p>

<p>三种主流的web服务方案：SOAP XML-RPC 和 REST。</p>

<p>REST是风格而不是标准。</p>

<p>REST通常基于使用HTTP，URI，和XML以及HTML这些现有的广泛流行的协议和标准。</p>

<ul>
<li>资源是由URI来指定</li>
<li>对资源的操作包括获取、创建、修改和删除资源，这些操作正好对应HTTP协议提供的GET、POST、PUT和DELETE方法。</li>
<li>通过操作资源的表现形式来操作资源。</li>
<li>资源的表现形式则是XML或者HTML，取决于读者是机器还是人，是消费web服务的客户软件还是web浏览器。当然也可以是任何其他的格式。</li>
</ul>


<p>应该注意区别应用的状态和连接协议的状态。HTTP连接是无状态的（也就是不记录每个连接的信息），而REST传输会包含应用的所有状态信息，因此可以大幅降低对HTTP连接的重复请求资源消耗</p>

<p>也就是 连接依旧是无状态的，应用是有状态的。</p>

<h4>RESTful web service</h4>

<p>一个使用HTTP并遵循REST原则的Web服务</p>

<p>直观简短的资源地址：URI，比如：<a href="http://example.com/resources/%E3%80%82">http://example.com/resources/%E3%80%82</a>
传输的资源：Web服务接受与返回的互联网媒体类型，比如：JSON，XML ，YAML 等。
对资源的操作：Web服务在该资源上所支持的一系列请求方法（比如：POST，GET，PUT或DELETE）。</p>

<h4>简单的网络商店例子</h4>

<p>列举所有商品</p>

<pre><code>GET http://www.store.com/products
</code></pre>

<p>呈现某一件商品</p>

<pre><code>GET http://www.store.com/product/12345
</code></pre>

<p>下单购买，</p>

<pre><code>POST http://www.store.com/order
&lt;purchase-order&gt;
&lt;item&gt; ... &lt;/item&gt;
&lt;/purchase-order&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在MAC系统上安装并调试Rails]]></title>
    <link href="http://apollojoke.github.io/blog/2014/09/28/ru-he-zai-macxi-tong-shang-an-zhuang-bing-diao-shi-rails/"/>
    <updated>2014-09-28T20:23:29+08:00</updated>
    <id>http://apollojoke.github.io/blog/2014/09/28/ru-he-zai-macxi-tong-shang-an-zhuang-bing-diao-shi-rails</id>
    <content type="html"><![CDATA[<hr />

<h3>安装ruby和rails</h3>

<h5>安装RVM管理ruby版本  参考 <a href="http://rvm.io">rvm.io</a></h5>

<p>\curl -sSL <a href="https://get.rvm.io">https://get.rvm.io</a> | bash -s stable</p>

<p>&lsquo;rvm get head&rsquo;    更新RVM</p>

<h5>安装ruby(2.1.2)</h5>

<p>&lsquo;rvm list known&rsquo;    可查看所有ruby版本，选择稳定版本安装。</p>

<p>&lsquo;rvm install 2.1.2&rsquo;    以2.1.2版本为例，安装ruby。</p>

<p>&lsquo;rvm &ndash;default use 2.1.2&rsquo;    将此版本的ruby设置为默认版本，避免每次启动shell都要选择所使用的ruby版本。</p>

<p>&lsquo;rvm list&rsquo;    可以查看所有安装的ruby版本。</p>

<h5>安装rails</h5>

<p>&lsquo;gem install rails&rsquo;    直接安装rails, gem被包含在ruby中，不用单独安装。</p>

<h5>新建rails工程，并bundle install</h5>

<p>&lsquo;rails new test&rsquo;    新建名为test的工程。</p>

<p>这个命令执行到最后会执行bundle install。如果长时间卡住，可以 Ctrl + C 结束安装，修改gem源后重新执行。</p>

<p>在工程根目录下Gemfile中，使用淘宝源 &lsquo;<a href="http://ruby.taobao.org">http://ruby.taobao.org</a>&rsquo; 替换原有gem源。</p>

<hr />

<h3>美化debug</h3>

<p>在Gemfile中添加如下代码：</p>

<pre><code>group :development do
    gem 'better_errors'
    gem 'binding_of_caller'
    gem 'meta_request'
    gem 'pry'
    gem 'pry-rails'
end
</code></pre>

<p>另外添加chrome插件 &lsquo;rails panel&rsquo;,方便调试。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Blog]]></title>
    <link href="http://apollojoke.github.io/blog/2014/09/27/my-first-blog/"/>
    <updated>2014-09-27T15:57:11+08:00</updated>
    <id>http://apollojoke.github.io/blog/2014/09/27/my-first-blog</id>
    <content type="html"><![CDATA[<h4>这是我的第一篇博客</h4>

<hr />

<p>在这里我想写技术，想写总结，想写感想。希望我能坚持下去。</p>

<p>我发现我得先熟悉markdown。</p>
]]></content>
  </entry>
  
</feed>
